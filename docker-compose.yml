
services:
  webapp:
    container_name: webapp
    build:
      context: ./backend
    ports:
      - "18080:18080"  
    volumes:
      - app_data:/app  
      - static_data:/app/static
    env_file:
      - ./.env
    command: >
      bash -c "sleep 50 &&
      source /ctr-py-venv/bin/activate &&
      python manage.py makemigrations &&
      python manage.py migrate &&
      python manage.py collectstatic --noinput &&
      gunicorn screener_website.wsgi:application --bind 0.0.0.0:18080"
    depends_on:
      - database
    networks:
      - webapp_network

  database:
    image: postgres:17
    container_name: postgre
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./.env
    ports:
      - 5432:5432
    networks:
      - webapp_network

  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    env_file:
      - ./.env
    ports:
      - 5050:80
    networks:
      - webapp_network

  worker:
    build:
      context: ./backend
    hostname: worker
    volumes:
      - app_data:/app
    env_file:
      - ./.env
    depends_on:
      - redis
      - webapp
      - database
    command: >
      bash -c "sleep 100 &&
      source /ctr-py-venv/bin/activate &&
      celery -A screener_website worker --loglevel=info"
    networks:
      - webapp_network

  redis:
    image: redis
    hostname: redis
    ports:
      - "6379:6379"
    networks:
      - webapp_network

  beat:
    build:
      context: ./backend
    hostname: beat
    volumes:
      - app_data:/app
    env_file:
      - ./.env
    depends_on:
      - redis
      - webapp
      - worker
      - database
    command: >
      bash -c "sleep 150 &&
      source /ctr-py-venv/bin/activate &&
      celery -A screener_website beat --loglevel=info"
    networks:
      - webapp_network

  flower:
    build:
      context: ./backend
    hostname: flower
    ports:
      - "5555:5555"
    volumes:
      - app_data:/app
    env_file:
      - ./.env      
    depends_on:
      - webapp
      - redis
      - worker
    command: >
      bash -c "sleep 150 &&
      source /ctr-py-venv/bin/activate &&
      celery -A screener_website flower --basic_auth=${FLOWER_USER}:${FLOWER_PASSWORD}"
    networks:
      - webapp_network

  telegram_bot:
    build: ./telegram_bot  
    container_name: telegram_bot
    volumes:
      - ./telegram_bot:/app
    env_file:
      - ./.env      
    command: python main.py
    networks:
      - webapp_network

  nginx:
    build: ./nginx
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
      - ./nginx:/etc/nginx/conf.d:ro
      - static_data:/app/static:ro
      - media_data:/app/media:ro
    depends_on:
      - webapp
    command: >
      sh -c "sleep 150 && nginx -g 'daemon off;'"
    networks:
      - webapp_network

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "sh -c 'trap exit TERM; while :; do sleep 12h & wait $!; certbot renew; done'"
    networks:
      - webapp_network

volumes:
  app_data:
  postgres_data:
  static_data:
  media_data:

networks:
  webapp_network:
